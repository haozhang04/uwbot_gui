"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class state_robot_t(object):
    """
    水下机器人低级状态数据结构
    包含浮游模式、轮式模式、电磁铁、清洗等功能的状态数据
    
    机器人状态 
    """

    __slots__ = ["sta_position_x", "sta_position_y", "sta_position_z", "sta_roll", "sta_pitch", "sta_yaw"]

    __typenames__ = ["float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.sta_position_x = 0.0
        """
        位置和姿态
        LCM Type: float
        """

        self.sta_position_y = 0.0
        """
        X坐标 (m)
        LCM Type: float
        """

        self.sta_position_z = 0.0
        """
        Y坐标 (m)
        LCM Type: float
        """

        self.sta_roll = 0.0
        """
        Z坐标/深度 (m)
        LCM Type: float
        """

        self.sta_pitch = 0.0
        """
        横滚角 (rad)
        LCM Type: float
        """

        self.sta_yaw = 0.0
        """
        俯仰角 (rad)
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(state_robot_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffff", self.sta_position_x, self.sta_position_y, self.sta_position_z, self.sta_roll, self.sta_pitch, self.sta_yaw))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_robot_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_robot_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = state_robot_t()
        self.sta_position_x, self.sta_position_y, self.sta_position_z, self.sta_roll, self.sta_pitch, self.sta_yaw = struct.unpack(">ffffff", buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if state_robot_t in parents: return 0
        tmphash = (0xa9d91f62ddeca0e7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if state_robot_t._packed_fingerprint is None:
            state_robot_t._packed_fingerprint = struct.pack(">Q", state_robot_t._get_hash_recursive([]))
        return state_robot_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_robot_t._get_packed_fingerprint())[0]

