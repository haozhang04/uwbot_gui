"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class cmd_floating_mode_t(object):
    __slots__ = ["cmd_floating_vel_x", "cmd_floating_vel_y", "cmd_floating_vel_z", "cmd_floating_angular_roll", "cmd_floating_angular_yaw", "cmd_floating_angular_pitch", "cmd_depth_hold", "cmd_target_depth", "cmd_floating_heading_hold", "cmd_target_roll", "cmd_target_yaw", "cmd_target_pitch"]

    def __init__(self):
        self.cmd_floating_vel_x = 0.0
        self.cmd_floating_vel_y = 0.0
        self.cmd_floating_vel_z = 0.0
        self.cmd_floating_angular_roll = 0.0
        self.cmd_floating_angular_yaw = 0.0
        self.cmd_floating_angular_pitch = 0.0
        self.cmd_depth_hold = 0
        self.cmd_target_depth = 0.0
        self.cmd_floating_heading_hold = 0
        self.cmd_target_roll = 0.0
        self.cmd_target_yaw = 0.0
        self.cmd_target_pitch = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(cmd_floating_mode_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffffififff", self.cmd_floating_vel_x, self.cmd_floating_vel_y, self.cmd_floating_vel_z, self.cmd_floating_angular_roll, self.cmd_floating_angular_yaw, self.cmd_floating_angular_pitch, self.cmd_depth_hold, self.cmd_target_depth, self.cmd_floating_heading_hold, self.cmd_target_roll, self.cmd_target_yaw, self.cmd_target_pitch))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cmd_floating_mode_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cmd_floating_mode_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cmd_floating_mode_t()
        self.cmd_floating_vel_x, self.cmd_floating_vel_y, self.cmd_floating_vel_z, self.cmd_floating_angular_roll, self.cmd_floating_angular_yaw, self.cmd_floating_angular_pitch, self.cmd_depth_hold, self.cmd_target_depth, self.cmd_floating_heading_hold, self.cmd_target_roll, self.cmd_target_yaw, self.cmd_target_pitch = struct.unpack(">ffffffififff", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cmd_floating_mode_t in parents: return 0
        tmphash = (0x3be0614c37937fbf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cmd_floating_mode_t._packed_fingerprint is None:
            cmd_floating_mode_t._packed_fingerprint = struct.pack(">Q", cmd_floating_mode_t._get_hash_recursive([]))
        return cmd_floating_mode_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

