"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class state_system_t(object):
    __slots__ = ["sta_system_voltage", "sta_system_current", "sta_system_power", "sta_comm_status", "sta_communication_status", "sta_comm_latency", "sta_packet_loss", "sta_leak_detected", "sta_uptime"]

    def __init__(self):
        self.sta_system_voltage = 0.0
        self.sta_system_current = 0.0
        self.sta_system_power = 0.0
        self.sta_comm_status = 0
        self.sta_communication_status = 0
        self.sta_comm_latency = 0
        self.sta_packet_loss = 0
        self.sta_leak_detected = 0
        self.sta_uptime = 0

    def encode(self):
        buf = BytesIO()
        buf.write(state_system_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffiiiiii", self.sta_system_voltage, self.sta_system_current, self.sta_system_power, self.sta_comm_status, self.sta_communication_status, self.sta_comm_latency, self.sta_packet_loss, self.sta_leak_detected, self.sta_uptime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_system_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_system_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = state_system_t()
        self.sta_system_voltage, self.sta_system_current, self.sta_system_power, self.sta_comm_status, self.sta_communication_status, self.sta_comm_latency, self.sta_packet_loss, self.sta_leak_detected, self.sta_uptime = struct.unpack(">fffiiiiii", buf.read(36))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if state_system_t in parents: return 0
        tmphash = (0x4f405556ec9f73ce) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if state_system_t._packed_fingerprint is None:
            state_system_t._packed_fingerprint = struct.pack(">Q", state_system_t._get_hash_recursive([]))
        return state_system_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

