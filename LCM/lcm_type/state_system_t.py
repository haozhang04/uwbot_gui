"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class state_system_t(object):
    """ 系统状态  """

    __slots__ = ["sta_system_voltage", "sta_system_current", "sta_system_power", "sta_comm_status", "sta_communication_status", "sta_send_time", "sta_packet_loss", "sta_leak_detected", "sta_uptime"]

    __typenames__ = ["float", "float", "float", "int32_t", "int32_t", "int64_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.sta_system_voltage = 0.0
        """ LCM Type: float """
        self.sta_system_current = 0.0
        """
        电压 (V)
        LCM Type: float
        """

        self.sta_system_power = 0.0
        """
        电流 (A)
        LCM Type: float
        """

        self.sta_comm_status = 0
        """
        功耗 (W)
        LCM Type: int32_t
        """

        self.sta_communication_status = 0
        """
        通信状态: 0-断开, 1-正常, 2-延迟高, 3-不稳定
        LCM Type: int32_t
        """

        self.sta_send_time = 0
        """
        通信状态别名，兼容性
        LCM Type: int64_t
        """

        self.sta_packet_loss = 0
        """
        发送时间 (ms)
        LCM Type: int32_t
        """

        self.sta_leak_detected = 0
        """
        丢包计数
        LCM Type: int32_t
        """

        self.sta_uptime = 0
        """
        漏水检测: 0-正常, 1-检测到漏水
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(state_system_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffiiqiii", self.sta_system_voltage, self.sta_system_current, self.sta_system_power, self.sta_comm_status, self.sta_communication_status, self.sta_send_time, self.sta_packet_loss, self.sta_leak_detected, self.sta_uptime))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_system_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_system_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = state_system_t()
        self.sta_system_voltage, self.sta_system_current, self.sta_system_power, self.sta_comm_status, self.sta_communication_status, self.sta_send_time, self.sta_packet_loss, self.sta_leak_detected, self.sta_uptime = struct.unpack(">fffiiqiii", buf.read(40))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if state_system_t in parents: return 0
        tmphash = (0xfe1d356b680d42d4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if state_system_t._packed_fingerprint is None:
            state_system_t._packed_fingerprint = struct.pack(">Q", state_system_t._get_hash_recursive([]))
        return state_system_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_system_t._get_packed_fingerprint())[0]

