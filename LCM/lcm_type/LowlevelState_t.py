"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from .state_robot_t import state_robot_t
from .state_electromagnet_t import state_electromagnet_t
from .state_wheel_mode_t import state_wheel_mode_t
from .state_brush_t import state_brush_t
from .state_system_t import state_system_t
from .state_floating_mode_t import state_floating_mode_t

class LowlevelState_t(object):
    """ 机器人状态结构体  """

    __slots__ = ["state_robot", "state_floating_mode", "state_wheel_mode", "state_electromagnet", "state_brush", "state_system"]

    __typenames__ = ["state_robot_t", "state_floating_mode_t", "state_wheel_mode_t", "state_electromagnet_t", "state_brush_t", "state_system_t"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.state_robot = state_robot_t()
        """ LCM Type: state_robot_t """
        self.state_floating_mode = state_floating_mode_t()
        """ LCM Type: state_floating_mode_t """
        self.state_wheel_mode = state_wheel_mode_t()
        """ LCM Type: state_wheel_mode_t """
        self.state_electromagnet = state_electromagnet_t()
        """ LCM Type: state_electromagnet_t """
        self.state_brush = state_brush_t()
        """ LCM Type: state_brush_t """
        self.state_system = state_system_t()
        """ LCM Type: state_system_t """

    def encode(self):
        buf = BytesIO()
        buf.write(LowlevelState_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.state_robot._get_packed_fingerprint() == state_robot_t._get_packed_fingerprint()
        self.state_robot._encode_one(buf)
        assert self.state_floating_mode._get_packed_fingerprint() == state_floating_mode_t._get_packed_fingerprint()
        self.state_floating_mode._encode_one(buf)
        assert self.state_wheel_mode._get_packed_fingerprint() == state_wheel_mode_t._get_packed_fingerprint()
        self.state_wheel_mode._encode_one(buf)
        assert self.state_electromagnet._get_packed_fingerprint() == state_electromagnet_t._get_packed_fingerprint()
        self.state_electromagnet._encode_one(buf)
        assert self.state_brush._get_packed_fingerprint() == state_brush_t._get_packed_fingerprint()
        self.state_brush._encode_one(buf)
        assert self.state_system._get_packed_fingerprint() == state_system_t._get_packed_fingerprint()
        self.state_system._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LowlevelState_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LowlevelState_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = LowlevelState_t()
        self.state_robot = state_robot_t._decode_one(buf)
        self.state_floating_mode = state_floating_mode_t._decode_one(buf)
        self.state_wheel_mode = state_wheel_mode_t._decode_one(buf)
        self.state_electromagnet = state_electromagnet_t._decode_one(buf)
        self.state_brush = state_brush_t._decode_one(buf)
        self.state_system = state_system_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if LowlevelState_t in parents: return 0
        newparents = parents + [LowlevelState_t]
        tmphash = (0x1e761b938ea551db+ state_robot_t._get_hash_recursive(newparents)+ state_floating_mode_t._get_hash_recursive(newparents)+ state_wheel_mode_t._get_hash_recursive(newparents)+ state_electromagnet_t._get_hash_recursive(newparents)+ state_brush_t._get_hash_recursive(newparents)+ state_system_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if LowlevelState_t._packed_fingerprint is None:
            LowlevelState_t._packed_fingerprint = struct.pack(">Q", LowlevelState_t._get_hash_recursive([]))
        return LowlevelState_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", LowlevelState_t._get_packed_fingerprint())[0]

