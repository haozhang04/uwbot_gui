"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class state_electromagnet_t(object):
    """ 电磁铁状态  """

    __slots__ = ["sta_electromagnet_enable", "sta_electromagnet_voltage"]

    __typenames__ = ["int32_t", "int32_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.sta_electromagnet_enable = 0
        """ LCM Type: int32_t """
        self.sta_electromagnet_voltage = 0
        """
        电磁铁状态: 0-关闭, 1-开启
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(state_electromagnet_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.sta_electromagnet_enable, self.sta_electromagnet_voltage))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_electromagnet_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_electromagnet_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = state_electromagnet_t()
        self.sta_electromagnet_enable, self.sta_electromagnet_voltage = struct.unpack(">ii", buf.read(8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if state_electromagnet_t in parents: return 0
        tmphash = (0xb11c0c192b6d109e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if state_electromagnet_t._packed_fingerprint is None:
            state_electromagnet_t._packed_fingerprint = struct.pack(">Q", state_electromagnet_t._get_hash_recursive([]))
        return state_electromagnet_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_electromagnet_t._get_packed_fingerprint())[0]

