"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class state_wheel_mode_t(object):
    """ 轮式模式状态  """

    __slots__ = ["sta_wheel_linear_vel", "sta_wheel_angular_vel", "sta_motor_data", "sta_motor_temp"]

    __typenames__ = ["float", "float", "float", "float"]

    __dimensions__ = [None, None, [3], [3]]

    def __init__(self):
        self.sta_wheel_linear_vel = 0.0
        """
        速度状态
        LCM Type: float
        """

        self.sta_wheel_angular_vel = 0.0
        """
        线速度 (m/s)
        LCM Type: float
        """

        self.sta_motor_data = [ 0.0 for dim0 in range(3) ]
        """
        角速度 (rad/s)
        电机状态
        LCM Type: float[3]
        """

        self.sta_motor_temp = [ 0.0 for dim0 in range(3) ]
        """
        3个电机数据 0-舵机角度 (°), 1-1号电机速度 (m/s), 2-1号电机速度(m/s)
        LCM Type: float[3]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(state_wheel_mode_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ff", self.sta_wheel_linear_vel, self.sta_wheel_angular_vel))
        buf.write(struct.pack('>3f', *self.sta_motor_data[:3]))
        buf.write(struct.pack('>3f', *self.sta_motor_temp[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_wheel_mode_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_wheel_mode_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = state_wheel_mode_t()
        self.sta_wheel_linear_vel, self.sta_wheel_angular_vel = struct.unpack(">ff", buf.read(8))
        self.sta_motor_data = struct.unpack('>3f', buf.read(12))
        self.sta_motor_temp = struct.unpack('>3f', buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if state_wheel_mode_t in parents: return 0
        tmphash = (0x40afa50c5156c997) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if state_wheel_mode_t._packed_fingerprint is None:
            state_wheel_mode_t._packed_fingerprint = struct.pack(">Q", state_wheel_mode_t._get_hash_recursive([]))
        return state_wheel_mode_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_wheel_mode_t._get_packed_fingerprint())[0]

