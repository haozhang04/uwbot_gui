"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from .cmd_brush_t import cmd_brush_t
from .cmd_wheel_mode_t import cmd_wheel_mode_t
from .cmd_floating_mode_t import cmd_floating_mode_t
from .cmd_electromagnet_t import cmd_electromagnet_t
from .cmd_camera_t import cmd_camera_t

class LowlevelCmd_t(object):
    __slots__ = ["cmd_floating_mode", "cmd_wheel_mode", "cmd_electromagnet", "cmd_brush", "cmd_camera"]

    def __init__(self):
        self.cmd_floating_mode = cmd_floating_mode_t()
        self.cmd_wheel_mode = cmd_wheel_mode_t()
        self.cmd_electromagnet = cmd_electromagnet_t()
        self.cmd_brush = cmd_brush_t()
        self.cmd_camera = cmd_camera_t()

    def encode(self):
        buf = BytesIO()
        buf.write(LowlevelCmd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.cmd_floating_mode._get_packed_fingerprint() == cmd_floating_mode_t._get_packed_fingerprint()
        self.cmd_floating_mode._encode_one(buf)
        assert self.cmd_wheel_mode._get_packed_fingerprint() == cmd_wheel_mode_t._get_packed_fingerprint()
        self.cmd_wheel_mode._encode_one(buf)
        assert self.cmd_electromagnet._get_packed_fingerprint() == cmd_electromagnet_t._get_packed_fingerprint()
        self.cmd_electromagnet._encode_one(buf)
        assert self.cmd_brush._get_packed_fingerprint() == cmd_brush_t._get_packed_fingerprint()
        self.cmd_brush._encode_one(buf)
        assert self.cmd_camera._get_packed_fingerprint() == cmd_camera_t._get_packed_fingerprint()
        self.cmd_camera._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LowlevelCmd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LowlevelCmd_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LowlevelCmd_t()
        self.cmd_floating_mode = cmd_floating_mode_t._decode_one(buf)
        self.cmd_wheel_mode = cmd_wheel_mode_t._decode_one(buf)
        self.cmd_electromagnet = cmd_electromagnet_t._decode_one(buf)
        self.cmd_brush = cmd_brush_t._decode_one(buf)
        self.cmd_camera = cmd_camera_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LowlevelCmd_t in parents: return 0
        newparents = parents + [LowlevelCmd_t]
        tmphash = (0x8d05f32a36f2ff90+ cmd_floating_mode_t._get_hash_recursive(newparents)+ cmd_wheel_mode_t._get_hash_recursive(newparents)+ cmd_electromagnet_t._get_hash_recursive(newparents)+ cmd_brush_t._get_hash_recursive(newparents)+ cmd_camera_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LowlevelCmd_t._packed_fingerprint is None:
            LowlevelCmd_t._packed_fingerprint = struct.pack(">Q", LowlevelCmd_t._get_hash_recursive([]))
        return LowlevelCmd_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

