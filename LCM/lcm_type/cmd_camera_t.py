"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class cmd_camera_t(object):
    __slots__ = ["cmd_camera_enable", "cmd_camera_zoom", "cmd_camera_record", "cmd_camera_record_time", "cmd_camera_snapshot", "cmd_storage_path", "cmd_camera_path"]

    def __init__(self):
        self.cmd_camera_enable = [ 0 for dim0 in range(2) ]
        self.cmd_camera_zoom = [ 0 for dim0 in range(2) ]
        self.cmd_camera_record = [ 0 for dim0 in range(2) ]
        self.cmd_camera_record_time = [ 0 for dim0 in range(2) ]
        self.cmd_camera_snapshot = [ 0 for dim0 in range(2) ]
        self.cmd_storage_path = [ "" for dim0 in range(2) ]
        self.cmd_camera_path = [ "" for dim0 in range(2) ]

    def encode(self):
        buf = BytesIO()
        buf.write(cmd_camera_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2i', *self.cmd_camera_enable[:2]))
        buf.write(struct.pack('>2i', *self.cmd_camera_zoom[:2]))
        buf.write(struct.pack('>2i', *self.cmd_camera_record[:2]))
        buf.write(struct.pack('>2i', *self.cmd_camera_record_time[:2]))
        buf.write(struct.pack('>2i', *self.cmd_camera_snapshot[:2]))
        for i0 in range(2):
            __cmd_storage_path_encoded = self.cmd_storage_path[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__cmd_storage_path_encoded)+1))
            buf.write(__cmd_storage_path_encoded)
            buf.write(b"\0")
        for i0 in range(2):
            __cmd_camera_path_encoded = self.cmd_camera_path[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__cmd_camera_path_encoded)+1))
            buf.write(__cmd_camera_path_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cmd_camera_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cmd_camera_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cmd_camera_t()
        self.cmd_camera_enable = struct.unpack('>2i', buf.read(8))
        self.cmd_camera_zoom = struct.unpack('>2i', buf.read(8))
        self.cmd_camera_record = struct.unpack('>2i', buf.read(8))
        self.cmd_camera_record_time = struct.unpack('>2i', buf.read(8))
        self.cmd_camera_snapshot = struct.unpack('>2i', buf.read(8))
        self.cmd_storage_path = []
        for i0 in range(2):
            __cmd_storage_path_len = struct.unpack('>I', buf.read(4))[0]
            self.cmd_storage_path.append(buf.read(__cmd_storage_path_len)[:-1].decode('utf-8', 'replace'))
        self.cmd_camera_path = []
        for i0 in range(2):
            __cmd_camera_path_len = struct.unpack('>I', buf.read(4))[0]
            self.cmd_camera_path.append(buf.read(__cmd_camera_path_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cmd_camera_t in parents: return 0
        tmphash = (0x51138536f5dec209) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cmd_camera_t._packed_fingerprint is None:
            cmd_camera_t._packed_fingerprint = struct.pack(">Q", cmd_camera_t._get_hash_recursive([]))
        return cmd_camera_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

