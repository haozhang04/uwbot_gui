"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class state_brush_t(object):
    """ 清洗功能状态  """

    __slots__ = ["sta_brush_power", "sta_brush_enable", "sta_water_flow", "sta_water_enable"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.sta_brush_power = 0
        """ LCM Type: int32_t """
        self.sta_brush_enable = 0
        """
        滚刷功率: 0-100%
        LCM Type: int32_t
        """

        self.sta_water_flow = 0
        """
        滚刷开关: 0-关闭, 1-开启
        LCM Type: int32_t
        """

        self.sta_water_enable = 0
        """
        水流强度: 0-100%
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(state_brush_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.sta_brush_power, self.sta_brush_enable, self.sta_water_flow, self.sta_water_enable))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_brush_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_brush_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = state_brush_t()
        self.sta_brush_power, self.sta_brush_enable, self.sta_water_flow, self.sta_water_enable = struct.unpack(">iiii", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if state_brush_t in parents: return 0
        tmphash = (0x6eeb6457d6dbb24f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if state_brush_t._packed_fingerprint is None:
            state_brush_t._packed_fingerprint = struct.pack(">Q", state_brush_t._get_hash_recursive([]))
        return state_brush_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_brush_t._get_packed_fingerprint())[0]

